{
  "stats": {
    "suites": 1,
    "tests": 9,
    "passes": 9,
    "pending": 0,
    "failures": 0,
    "start": "2021-01-26T11:44:01.319Z",
    "end": "2021-01-26T11:44:01.617Z",
    "duration": 298,
    "testsRegistered": 9,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "fb0a8e62-623f-4d51-84b1-8079031b4dfe",
      "title": "",
      "fullFile": "cypress/integration/APITests/apitests.spec.js",
      "file": "cypress/integration/APITests/apitests.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "2f41ebd2-1373-4617-89d9-ab2fd4249d9c",
          "title": "Scenarios to test movie suggestions api",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "SHOULD show 200 response for a request",
              "fullTitle": "Scenarios to test movie suggestions api SHOULD show 200 response for a request",
              "timedOut": null,
              "duration": 70,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('GET', '/api/v1/suggestions?q=Alien&sortBy=rotten_tomatoes').then(function (response) {\n  expect(response.status).equal(200);\n});",
              "err": {},
              "uuid": "0e44d3d4-02ad-4f27-8a1f-96d905f2114b",
              "parentUUID": "2f41ebd2-1373-4617-89d9-ab2fd4249d9c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "SHOULD show correct response body when movie name is given and rotten_tomatoes is used as sorting key",
              "fullTitle": "Scenarios to test movie suggestions api SHOULD show correct response body when movie name is given and rotten_tomatoes is used as sorting key",
              "timedOut": null,
              "duration": 28,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('GET', '/api/v1/suggestions?q=Alien&sortBy=rotten_tomatoes').then(function (response) {\n  expect(response.body[0]).to.include({\n    rotten_tomatoes: \"R3\",\n    film: \"Alien\"\n  });\n});",
              "err": {},
              "uuid": "b0c37e79-50f6-4b6d-85a2-f8ceb94907b0",
              "parentUUID": "2f41ebd2-1373-4617-89d9-ab2fd4249d9c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "SHOULD show correct response body when movie name is given and audience_score is used as sorting key",
              "fullTitle": "Scenarios to test movie suggestions api SHOULD show correct response body when movie name is given and audience_score is used as sorting key",
              "timedOut": null,
              "duration": 28,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('GET', '/api/v1/suggestions?q=Avatar&sortBy=audience_score').then(function (response) {\n  expect(response.body[0]).to.include({\n    audience_score: \"8\",\n    film: \"Avatar\"\n  });\n});",
              "err": {},
              "uuid": "115244fb-6fec-4207-bce7-035c23116196",
              "parentUUID": "2f41ebd2-1373-4617-89d9-ab2fd4249d9c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "SHOULD show a single movie suggestion as response if movie name is \"Persona and no sorting key is selected\"",
              "fullTitle": "Scenarios to test movie suggestions api SHOULD show a single movie suggestion as response if movie name is \"Persona and no sorting key is selected\"",
              "timedOut": null,
              "duration": 24,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('GET', '/api/v1/suggestions?q=Persona').then(function (response) {\n  expect(response.body).to.have.lengthOf(1);\n});",
              "err": {},
              "uuid": "f58a49c3-01df-4058-b6c1-43212748c181",
              "parentUUID": "2f41ebd2-1373-4617-89d9-ab2fd4249d9c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "SHOULD show an empty response if no movie name and sorting key are provided",
              "fullTitle": "Scenarios to test movie suggestions api SHOULD show an empty response if no movie name and sorting key are provided",
              "timedOut": null,
              "duration": 25,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('GET', '/api/v1/suggestions?q=--').then(function (response) {\n  expect(response.body).to.be.empty;\n});",
              "err": {},
              "uuid": "7194a815-4bbd-42a4-937a-c5a508430bae",
              "parentUUID": "2f41ebd2-1373-4617-89d9-ab2fd4249d9c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "SHOULD show an empty response if wrong movie name is provided and no sorting key is selected",
              "fullTitle": "Scenarios to test movie suggestions api SHOULD show an empty response if wrong movie name is provided and no sorting key is selected",
              "timedOut": null,
              "duration": 16,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('GET', '/api/v1/suggestions?q=owl').then(function (response) {\n  expect(response.body).to.be.empty;\n});",
              "err": {},
              "uuid": "142669f7-7b16-4132-aef5-66bbf59ddde2",
              "parentUUID": "2f41ebd2-1373-4617-89d9-ab2fd4249d9c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "SHOULD show an empty response if no movie name is provided and sorting key \"rotten tomatoes\" is selected",
              "fullTitle": "Scenarios to test movie suggestions api SHOULD show an empty response if no movie name is provided and sorting key \"rotten tomatoes\" is selected",
              "timedOut": null,
              "duration": 16,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('GET', '/api/v1/suggestions?q=--&sortBy=rotten_tomatoes').then(function (response) {\n  expect(response.body).to.be.empty;\n});",
              "err": {},
              "uuid": "cd50842f-825a-496a-a2f8-04df3eade540",
              "parentUUID": "2f41ebd2-1373-4617-89d9-ab2fd4249d9c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "SHOULD show an empty response if no movie name is provided and sorting key \"audience score\" is selected",
              "fullTitle": "Scenarios to test movie suggestions api SHOULD show an empty response if no movie name is provided and sorting key \"audience score\" is selected",
              "timedOut": null,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('GET', '/api/v1/suggestions?q=--&sortBy=audience_score').then(function (response) {\n  expect(response.body).to.be.empty;\n});",
              "err": {},
              "uuid": "73aa5712-d84f-4165-bb3d-26b22d479644",
              "parentUUID": "2f41ebd2-1373-4617-89d9-ab2fd4249d9c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validate the header",
              "fullTitle": "Scenarios to test movie suggestions api Validate the header",
              "timedOut": null,
              "duration": 28,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('/api/v1/suggestions?q=Jaws').its('headers').its('content-type').should('include', 'application/json; charset=utf-8');",
              "err": {},
              "uuid": "80b8b530-dfc3-4bc5-9ce9-100a7559e91b",
              "parentUUID": "2f41ebd2-1373-4617-89d9-ab2fd4249d9c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0e44d3d4-02ad-4f27-8a1f-96d905f2114b",
            "b0c37e79-50f6-4b6d-85a2-f8ceb94907b0",
            "115244fb-6fec-4207-bce7-035c23116196",
            "f58a49c3-01df-4058-b6c1-43212748c181",
            "7194a815-4bbd-42a4-937a-c5a508430bae",
            "142669f7-7b16-4132-aef5-66bbf59ddde2",
            "cd50842f-825a-496a-a2f8-04df3eade540",
            "73aa5712-d84f-4165-bb3d-26b22d479644",
            "80b8b530-dfc3-4bc5-9ce9-100a7559e91b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 252,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.1"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/reports/mocha",
        "quite": true,
        "overwrite": false,
        "html": true,
        "json": true
      },
      "version": "5.1.0"
    }
  }
}