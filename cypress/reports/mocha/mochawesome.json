{
  "stats": {
    "suites": 1,
    "tests": 9,
    "passes": 9,
    "pending": 0,
    "failures": 0,
    "start": "2021-01-26T10:28:00.068Z",
    "end": "2021-01-26T10:28:00.402Z",
    "duration": 334,
    "testsRegistered": 9,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "1d7ffc4a-b0b8-4417-a080-66e1704d1e70",
      "title": "",
      "fullFile": "cypress/integration/APITests/apitests.spec.js",
      "file": "cypress/integration/APITests/apitests.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "0fc4f743-27f4-4aa4-9e22-0ce688a42c5c",
          "title": "Scenarios to test movie suggestions api",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "SHOULD show 200 response for a request",
              "fullTitle": "Scenarios to test movie suggestions api SHOULD show 200 response for a request",
              "timedOut": null,
              "duration": 58,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('GET', '/api/v1/suggestions?q=Alien&sortBy=rotten_tomatoes').then(function (response) {\n  expect(response.status).equal(200);\n});",
              "err": {},
              "uuid": "467fc5f5-0b7b-47ac-8f55-1253ec6ee498",
              "parentUUID": "0fc4f743-27f4-4aa4-9e22-0ce688a42c5c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "SHOULD show correct response when movie name is given and rotten_tomatoes is used as sorting key",
              "fullTitle": "Scenarios to test movie suggestions api SHOULD show correct response when movie name is given and rotten_tomatoes is used as sorting key",
              "timedOut": null,
              "duration": 33,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('GET', '/api/v1/suggestions?q=Alien&sortBy=rotten_tomatoes').then(function (response) {\n  expect(response.body[0]).to.include({\n    rotten_tomatoes: \"R3\",\n    film: \"Alien\"\n  });\n});",
              "err": {},
              "uuid": "fb7f0d85-0c38-4726-912f-8426601dcb9f",
              "parentUUID": "0fc4f743-27f4-4aa4-9e22-0ce688a42c5c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "SHOULD show correct response when movie name is given and audience_score is used as sorting key",
              "fullTitle": "Scenarios to test movie suggestions api SHOULD show correct response when movie name is given and audience_score is used as sorting key",
              "timedOut": null,
              "duration": 41,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('GET', '/api/v1/suggestions?q=Avatar&sortBy=audience_score').then(function (response) {\n  expect(response.body[0]).to.include({\n    audience_score: \"8\",\n    film: \"Avatar\"\n  });\n});",
              "err": {},
              "uuid": "c2865049-4503-4b75-a890-e16ba55f66de",
              "parentUUID": "0fc4f743-27f4-4aa4-9e22-0ce688a42c5c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "SHOULD show a single movie suggestion response if movie name is \"Persona and no sorting key is selected\"",
              "fullTitle": "Scenarios to test movie suggestions api SHOULD show a single movie suggestion response if movie name is \"Persona and no sorting key is selected\"",
              "timedOut": null,
              "duration": 26,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('GET', '/api/v1/suggestions?q=Persona').then(function (response) {\n  expect(response.body).to.have.lengthOf(1);\n});",
              "err": {},
              "uuid": "3f2d724c-8bf8-4cf6-acbb-4a8255c63917",
              "parentUUID": "0fc4f743-27f4-4aa4-9e22-0ce688a42c5c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "SHOULD show an empty response if no movie name and sorting key are provided",
              "fullTitle": "Scenarios to test movie suggestions api SHOULD show an empty response if no movie name and sorting key are provided",
              "timedOut": null,
              "duration": 37,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('GET', '/api/v1/suggestions?q=--').then(function (response) {\n  expect(response.body).to.be.empty;\n});",
              "err": {},
              "uuid": "35e9ae0a-a0ad-47fb-96fc-e6d8765bb136",
              "parentUUID": "0fc4f743-27f4-4aa4-9e22-0ce688a42c5c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "SHOULD show an empty response if wrong movie name is provided and no sorting key is selected",
              "fullTitle": "Scenarios to test movie suggestions api SHOULD show an empty response if wrong movie name is provided and no sorting key is selected",
              "timedOut": null,
              "duration": 19,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('GET', '/api/v1/suggestions?q=owl').then(function (response) {\n  expect(response.body).to.be.empty;\n});",
              "err": {},
              "uuid": "a1a6e297-7eca-47f2-8268-c7072f46d77e",
              "parentUUID": "0fc4f743-27f4-4aa4-9e22-0ce688a42c5c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "SHOULD show an empty response if no movie name is provided and sorting key \"rotten tomatoes\" is selected",
              "fullTitle": "Scenarios to test movie suggestions api SHOULD show an empty response if no movie name is provided and sorting key \"rotten tomatoes\" is selected",
              "timedOut": null,
              "duration": 21,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('GET', '/api/v1/suggestions?q=--&sortBy=rotten_tomatoes').then(function (response) {\n  expect(response.body).to.be.empty;\n});",
              "err": {},
              "uuid": "409fc21b-516e-4689-ab69-aab2555de611",
              "parentUUID": "0fc4f743-27f4-4aa4-9e22-0ce688a42c5c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "SHOULD show an empty response if no movie name is provided and sorting key \"audience score\" is selected",
              "fullTitle": "Scenarios to test movie suggestions api SHOULD show an empty response if no movie name is provided and sorting key \"audience score\" is selected",
              "timedOut": null,
              "duration": 19,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('GET', '/api/v1/suggestions?q=--&sortBy=audience_score').then(function (response) {\n  expect(response.body).to.be.empty;\n});",
              "err": {},
              "uuid": "23b79794-d612-492d-854b-e7d6211e40c4",
              "parentUUID": "0fc4f743-27f4-4aa4-9e22-0ce688a42c5c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validate the header",
              "fullTitle": "Scenarios to test movie suggestions api Validate the header",
              "timedOut": null,
              "duration": 28,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('/api/v1/suggestions?q=Jaws').its('headers').its('content-type').should('include', 'application/json; charset=utf-8');",
              "err": {},
              "uuid": "243bad57-2d8d-420f-bc84-1a5d849c1a19",
              "parentUUID": "0fc4f743-27f4-4aa4-9e22-0ce688a42c5c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "467fc5f5-0b7b-47ac-8f55-1253ec6ee498",
            "fb7f0d85-0c38-4726-912f-8426601dcb9f",
            "c2865049-4503-4b75-a890-e16ba55f66de",
            "3f2d724c-8bf8-4cf6-acbb-4a8255c63917",
            "35e9ae0a-a0ad-47fb-96fc-e6d8765bb136",
            "a1a6e297-7eca-47f2-8268-c7072f46d77e",
            "409fc21b-516e-4689-ab69-aab2555de611",
            "23b79794-d612-492d-854b-e7d6211e40c4",
            "243bad57-2d8d-420f-bc84-1a5d849c1a19"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 282,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.1"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/reports/mocha",
        "quite": true,
        "overwrite": false,
        "html": true,
        "json": true
      },
      "version": "5.1.0"
    }
  }
}